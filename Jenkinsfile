pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube'
    }

    stages {

        stage('Verificar herramientas') {
            steps {
                sh '''
                    echo "üîç Verificando herramientas instaladas..."
                    which gitleaks && gitleaks version || echo "‚ö†Ô∏è Gitleaks no est√° instalado"
                    which dependency-check.sh || echo "‚ö†Ô∏è Dependency-check no est√° instalado"
                    which trivy || echo "‚ö†Ô∏è Trivy no est√° instalado"
                    which mvn || echo "‚ö†Ô∏è Maven no est√° instalado"
                    [ -f ./run-zap.sh ] && echo "‚úÖ run-zap.sh encontrado" || echo "‚ùå run-zap.sh no est√° en el workspace"
                '''
            }
        }

        stage('Checkout') {
            steps {
                git credentialsId: 'Github-token', url: 'https://github.com/BrunoCascante/DVWA.git'
            }
        }

        stage('Build') {
            steps {
                sh 'echo "üèóÔ∏è Construcci√≥n simple o test build"'
            }
        }

        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    withCredentials([string(credentialsId: 'sonarqube_token', variable: 'SONAR_TOKEN')]) {
                        sh 'mvn clean verify sonar:sonar -Dsonar.login=$SONAR_TOKEN || echo "‚ö†Ô∏è SonarQube fall√≥, revisa los logs."'
                    }
                }
            }
        }

        stage('Scan Secrets') {
            steps {
                sh 'gitleaks detect --source=. --report-path=gitleaks-report.json || echo "‚ö†Ô∏è Gitleaks encontr√≥ secretos o fall√≥."'
            }
        }

        stage('Scan Dependencies') {
            steps {
                sh '''
                    mkdir -p reports
                    dependency-check.sh \
                      --project DVWA \
                      --format HTML \
                      --out reports \
                      --scan . \
                      --log reports/dependency-check.log \
                      --data /var/lib/jenkins/dependency-check-data \
                      --nvdApiKey 20833060-833f-4bb7-8c33-4751cafe4722 \
                      --nvdApiDelay 3000 || echo "‚ö†Ô∏è Dependency-Check fall√≥, revisa los logs."
                '''
            }
        }

        stage('Scan Docker Image') {
            steps {
                sh '''
                    trivy image -f json -o reports/trivy-report.json ghcr.io/digininja/dvwa || echo "‚ö†Ô∏è Trivy termin√≥ con errores o vulnerabilidades."
                '''
            }
        }


        stage('Dynamic Analysis (ZAP)') {
            steps {
                sh './run-zap.sh || echo "‚ö†Ô∏è ZAP script fall√≥, revisar logs."'
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080', returnStdout: true).trim()
                    if (response != '200') {
                        echo "‚ö†Ô∏è La aplicaci√≥n no respondi√≥ correctamente. C√≥digo recibido: ${response}"
                    } else {
                        echo "‚úÖ Aplicaci√≥n activa. C√≥digo HTTP: ${response}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üì¶ Archivos generados en el workspace:'
            sh 'find . -type f'

            archiveArtifacts artifacts: 'reports/**/*.html, reports/**/*.log, **/*.json', allowEmptyArchive: true

            echo 'üìÅ Archivos archivados para revisi√≥n.'

            script {
                if (fileExists('reports/dependency-check-report.html')) {
                    publishHTML([
                        reportDir: 'reports',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'Dependency Check Report',
                        keepAll: true,
                        alwaysLinkToLastBuild: true,
                        allowMissing: true
                    ])
                } else {
                    echo "‚ö†Ô∏è No se encontr√≥ el archivo dependency-check-report.html para publicar"
                }
            }
        }

        success {
            echo '‚úÖ Pipeline completado exitosamente.'
        }

        failure {
            echo '‚ùå El pipeline ha fallado en alguna etapa. Revisa los resultados.'
        }
    }
}
